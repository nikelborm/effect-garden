diff --git a/dist/dts/Schema.d.ts b/dist/dts/Schema.d.ts
index 15d098e7573a5f64135fdde3481fbba286514fb2..753d93b41b09ae09c73aa3e79ae2ee4574d1c741 100644
--- a/dist/dts/Schema.d.ts
+++ b/dist/dts/Schema.d.ts
@@ -1591,7 +1591,7 @@ export interface brand<S extends Schema.Any, B extends string | symbol> extends
  * @category branding
  * @since 3.10.0
  */
-export declare const brand: <S extends Schema.Any, B extends string | symbol>(brand: B, annotations?: Annotations.Schema<Schema.Type<S> & Brand<B>>) => (self: S) => brand<S, B>;
+export declare const brand: <S extends Schema.Any, B extends string | symbol>(brand: B, annotations?: Annotations.Schema<Schema.Type<S> & Brand<B>>) => <SubS extends S>(self: SubS) => brand<SubS, B>;
 /**
  * @category combinators
  * @since 3.10.0
diff --git a/src/Schema.ts b/src/Schema.ts
index ab2e298242e0d2e8a93eceb0f6b7622efcf2a8f4..6e024c127e33f1ee024b45c18463470548ae804d 100644
--- a/src/Schema.ts
+++ b/src/Schema.ts
@@ -3403,7 +3403,7 @@ export const brand = <S extends Schema.Any, B extends string | symbol>(
   brand: B,
   annotations?: Annotations.Schema<Schema.Type<S> & Brand<B>>
 ) =>
-(self: S): brand<S, B> => {
+<SubS extends S>(self: SubS): brand<SubS, B> => {
   const annotation: AST.BrandAnnotation = option_.match(AST.getBrandAnnotation(self.ast), {
     onNone: () => [brand],
     onSome: (brands) => [...brands, brand]
